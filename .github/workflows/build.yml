name: Build stage

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      piper-version:
        required: false
        type: string
        default: 'latest'
      sap-piper-version:
        required: false
        type: string
        default: 'latest'
      on-productive-branch:
        required: true
        type: string
      is-optimized-and-scheduled:
        required: true
        type: string
      active-stages-map:
        required: true
        type: string
      active-steps-map:
        required: true
        type: string
      pipeline-env:
        required: true
        type: string
    outputs:
      active-stages-map:
        value: ${{ jobs.Build.outputs.activeStagesMap }}
      active-steps-map:
        value: ${{ jobs.Build.outputs.activeStepsMap }}
      pipeline-env: 
        value: ${{ jobs.Build.outputs.pipelineEnv }}
env:
  PIPER_ACTION_PIPER_VERSION: ${{ inputs.piper-version }}
  PIPER_ACTION_SAP_PIPER_VERSION: ${{ inputs.sap-piper-version }}
  PIPER_ACTION_GITHUB_TOOLS_TOKEN: ${{ secrets.GH_TOOLS }}
  PIPER_vaultAppRoleID: ${{ secrets.PIPER_VAULTAPPROLEID }}
  PIPER_vaultAppRoleSecretID: ${{ secrets.PIPER_VAULTAPPROLESECRETID }}
  PIPER_ACTION_PIPELINE_ENV: ${{ inputs.pipeline-env }}
jobs:
  Build:
    runs-on: self-hosted
    if: fromJSON(inputs.active-stages-map).Build == true
    outputs:
      activeStagesMap: ${{ steps.checkIfStepActive.outputs.activeStagesMap }}
      activeStepsMap: ${{ steps.checkIfStepActive.outputs.activeStepsMap }}
      pipelineEnv: ${{ steps.pipelineEnv.outputs.pipelineEnv }}
    steps:
      - uses: actions/checkout@v3
      - id: stage_config
        name: Read stage configuration
        uses: SAP/project-piper-action@master
        with:
          step-name: getConfig
          flags: --stageConfig --outputFile stage-config.json
      - run: |
          echo "buildTool=$(jq -j .buildTool stage-config.json)" >> $GITHUB_ENV 
          echo "::notice::buildTool=$(jq -j .buildTool stage-config.json)" 
      - run: |
          if [[ ${{ env.buildTool }} == "maven" ]]; then
            echo "dockerImage=maven:3.6-jdk-8" >> $GITHUB_ENV
          elif [[ ${{ env.buildTool }} == "gradle" ]]; then
            echo "dockerImage=gradle:6-jdk11-alpine" >> $GITHUB_ENV
          fi
      - name: artifactPrepareVersion
        if: |
          fromJSON(inputs.active-steps-map)[github.job]['artifactPrepareVersion'] == true &&
          inputs.on-productive-branch == 'true'
        uses: SAP/project-piper-action@master
        with:
          step-name: artifactPrepareVersion
          docker-image: ${{ env.dockerImage }}
      - name: artifactPrepareVersion
        if: |
          fromJSON(inputs.active-steps-map)[github.job]['artifactPrepareVersion'] == true &&
          inputs.on-productive-branch != 'true' && env.buildTool != 'maven'
        uses: SAP/project-piper-action@master
        with:
          step-name: artifactPrepareVersion
          flags: --versioningType cloud_noTag
          docker-image: ${{ env.dockerImage }}
      - name: sapCallStagingService
        if:  fromJSON(inputs.active-steps-map)[github.job]['sapCallStagingService'] == true
        uses: SAP/project-piper-action@master
        with:
          step-name: sapCallStagingService
          flags: '--action createGroup'
      - name: sapCallStagingService
        if:  fromJSON(inputs.active-steps-map)[github.job]['sapCallStagingService'] == true
        uses: SAP/project-piper-action@master
        with:
          step-name: sapCallStagingService
          flags: '--action createRepositories'
      - name: mtaBuild
        if:  fromJSON(inputs.active-steps-map)[github.job]['mtaBuild'] == true
        uses: SAP/project-piper-action@master
        with:
          step-name: mtaBuild
          flags: --publish
      - name: gradleExecuteBuild
        if: fromJSON(inputs.active-steps-map)[github.job]['gradleExecuteBuild'] == true
        uses: SAP/project-piper-action@master
        with:
          step-name: gradleExecuteBuild
          flags: --publish --createBOM
      - name: npmExecuteScripts
        if: fromJSON(inputs.active-steps-map)[github.job]['npmExecuteScripts'] == true
        uses: SAP/project-piper-action@master
        with:
          step-name: npmExecuteScripts
          flags: --publish --createBOM
      - name: mavenBuild
        if: fromJSON(inputs.active-steps-map)[github.job]['mavenBuild'] == true
        uses: SAP/project-piper-action@master
        with:
          step-name: mavenBuild
          flags: '--publish --createBOM --logSuccessfulMavenTransfers'
      - name: pythonBuild
        if: fromJSON(inputs.active-steps-map)[github.job]['pythonBuild'] == true
        uses: SAP/project-piper-action@master
        with:
          step-name: pythonBuild
          flags: '--publish --createBOM'
      - name: golangBuild
        if: fromJSON(inputs.active-steps-map)[github.job]['golangBuild'] == true
        uses: SAP/project-piper-action@master
        with:
          step-name: golangBuild
          flags: '--publish --createBOM'
      - name: kanikoExecute
        if: fromJSON(inputs.active-steps-map)[github.job]['kanikoExecute'] == true
        uses: SAP/project-piper-action@master
        with:
          step-name: kanikoExecute
          flags: '--createBOM'
      - name: cnbBuild
        if: fromJSON(inputs.active-steps-map)[github.job]['cnbBuild'] == true
        uses: SAP/project-piper-action@master
        with:
          step-name: cnbBuild
      - name: hadolintExecute
        if: fromJSON(inputs.active-steps-map)[github.job]['hadolintExecute'] == true
        uses: SAP/project-piper-action@master
        with:
          step-name: hadolintExecute
      - name: helmExecute
        if: fromJSON(inputs.active-steps-map)[github.job]['helmExecute'] == true
        uses: SAP/project-piper-action@master
        with:
          step-name: helmExecute
          flags: '--publish'
      # There is a special case in the stage configuration for sapDownloadArtifact
      # which depends on the existence of a CPE value that is dynamically created by helmExecute.
      # Therefore checkIfStepActive needs to run again if helmExecute is executed
      - name: checkIfStepActive (post helmExecute)
        if: fromJSON(inputs.active-steps-map)[github.job]['helmExecute'] == true
        uses: SAP/project-piper-action@master
        with:
          step-name: ''
          create-check-if-step-active-maps: true
      - name: sapCumulusUpload (URL log upload)
        if: |
          fromJSON(inputs.active-steps-map)[github.job]['sapCumulusUpload'] == true &&
          inputs.on-productive-branch == 'true' &&
          inputs.is-optimized-and-scheduled == 'false'
        uses: SAP/project-piper-action@master
        with:
          step-name: sapCumulusUpload
          flags: --filePattern **/url-log.json --stepResultType access-log
      - name: sapGenerateEnvironmentInfo
        if: inputs.on-productive-branch == 'true'
        uses: SAP/project-piper-action@master
        with:
          step-name: sapGenerateEnvironmentInfo
          flags: --buildEnvironment Hyperspace_GitHubActions_native_BuildStep
      - uses: actions/upload-artifact@v3
        if: |
          inputs.on-productive-branch == 'true' &&
          inputs.is-optimized-and-scheduled == 'false'
        with:
          path: ./build-settings.json
      - uses: actions/upload-artifact@v3
        if: inputs.on-productive-branch == 'true'
        with:
          path: ./env*.json
      - name: sapCumulusUpload (build settings info)
        if: |
          fromJSON(inputs.active-steps-map)[github.job]['sapCumulusUpload'] == true &&
          inputs.on-productive-branch == 'true' &&
          inputs.is-optimized-and-scheduled == 'false'
        uses: SAP/project-piper-action@master
        with:
          step-name: sapCumulusUpload
          flags: --filePattern build-settings.json --stepResultType settings
      - name: sapCumulusUpload (environment info)
        if: |
          fromJSON(inputs.active-steps-map)[github.job]['sapCumulusUpload'] == true &&
          inputs.on-productive-branch == 'true'
        uses: SAP/project-piper-action@master
        with:
          step-name: sapCumulusUpload
          flags: --filePattern env*.json --stepResultType root
      - name: sapCumulusUpload (SBom)
        if: |
          fromJSON(inputs.active-steps-map)[github.job]['sapCumulusUpload'] == true &&
          inputs.on-productive-branch == 'true' &&
          inputs.is-optimized-and-scheduled == 'false'
        uses: SAP/project-piper-action@master
        with:
          step-name: sapCumulusUpload
          flags: --filePattern **/bom*.xml --stepResultType sbom
      - name: sapCallStagingService
        if: |
          always() &&
          fromJSON(inputs.active-steps-map)[github.job]['sapCallStagingService'] == true
        uses: SAP/project-piper-action@master
        with:
          step-name: sapCallStagingService
          flags: '--action close'

      # - name: karmaExecuteTests
      #   if: fromJSON(inputs.active-steps-map)[github.job]['karmaExecuteTests'] == true
      #   uses: SAP/project-piper-action@master
      #   with:
      #     step-name: karmaExecuteTests
      - name: sapCumulusUpload (junit test results)
        if: |
          fromJSON(inputs.active-steps-map)[github.job]['sapCumulusUpload'] == true &&
          inputs.on-productive-branch == 'true' &&
          inputs.is-optimized-and-scheduled == 'false'
        uses: SAP/project-piper-action@master
        with:
          step-name: sapCumulusUpload
          flags: --filePattern **/TEST-*.xml --stepResultType junit
      - name: sapCumulusUpload (jacoco code coverage results)
        if: |
          fromJSON(inputs.active-steps-map)[github.job]['sapCumulusUpload'] == true &&
          inputs.on-productive-branch == 'true' &&
          inputs.is-optimized-and-scheduled == 'false'
        uses: SAP/project-piper-action@master
        with:
          step-name: sapCumulusUpload
          flags: --filePattern **/jacoco.xml --stepResultType jacoco-coverage
      - name: sapCumulusUpload (cobertura test coverage results)
        if: |
          fromJSON(inputs.active-steps-map)[github.job]['sapCumulusUpload'] == true &&
          inputs.on-productive-branch == 'true' &&
          inputs.is-optimized-and-scheduled == 'false'
        uses: SAP/project-piper-action@master
        with:
          step-name: sapCumulusUpload
          flags: --filePattern **/cobertura-coverage.xml --stepResultType cobertura-coverage
      - name: sapCumulusUpload (requirement mapping)
        if: |
          fromJSON(inputs.active-steps-map)[github.job]['sapCumulusUpload'] == true &&
          inputs.on-productive-branch == 'true' &&
          inputs.is-optimized-and-scheduled == 'false'
        uses: SAP/project-piper-action@master
        with:
          step-name: sapCumulusUpload
          flags: --filePattern **/requirement.mapping --stepResultType requirement-mapping
      - name: sonarExecuteScan
        if: fromJSON(inputs.active-steps-map)[github.job]['sonarExecuteScan'] == true
        uses: SAP/project-piper-action@master
        with: 
          step-name: sonarExecuteScan
      - name: sapCumulusUpload (sonarqube results)
        if: |
          fromJSON(inputs.active-steps-map)[github.job]['sapCumulusUpload'] == true &&
          inputs.on-productive-branch == 'true' &&
          inputs.is-optimized-and-scheduled == 'false'
        uses: SAP/project-piper-action@master
        with:
          step-name: sapCumulusUpload
          flags: --filePattern **/sonarscan-result.json,**/sonarscan.json --stepResultType sonarqube
      - name: Export checkIfStepActive maps
        if: always()
        id: checkIfStepActive
        run: |
          if [ -f .pipeline/stage_out.json ]; then
            echo "::set-output name=activeStagesMap::$(jq -c . < .pipeline/stage_out.json)"
            echo "::set-output name=activeStepsMap::$(jq -c . < .pipeline/step_out.json)"
          else
            echo "::set-output name=activeStagesMap::$( jq -c . <<< '${{ inputs.active-stages-map }}' )"
            echo "::set-output name=activeStepsMap::$( jq -c . <<< '${{ inputs.active-steps-map }}' )"
          fi
      - name: Export pipeline environment
        uses: SAP/project-piper-action@master
        id: pipelineEnv
        with:
          step-name: ''
          export-pipeline-environment: true
