name: Init stage

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      piper-version:
        required: false
        type: string
        default: 'latest'
      sap-piper-version:
        required: false
        type: string
        default: 'latest'
      custom-defaults-paths:
        required: false
        type: string
        default: ''
    outputs:
      on-productive-branch:
        value: ${{ jobs.Init.outputs.onProductiveBranch }}
      is-optimized-and-scheduled:
        value: ${{ jobs.Init.outputs.isOptimizedAndScheduled }}
      active-steps-map:
        value: ${{ jobs.Init.outputs.activeStepsMap }}
      active-stages-map:
        value: ${{ jobs.Init.outputs.activeStagesMap }}
      pipeline-env: 
        value: ${{ jobs.Init.outputs.pipelineEnv }}
env:
  PIPER_ACTION_PIPER_VERSION: ${{ inputs.piper-version }}
  PIPER_ACTION_SAP_PIPER_VERSION: ${{ inputs.sap-piper-version }}
  PIPER_ACTION_GITHUB_TOOLS_TOKEN: ${{ secrets.GH_TOOLS }}
  PIPER_vaultAppRoleID: ${{ secrets.PIPER_VAULTAPPROLEID }}
  PIPER_vaultAppRoleSecretID: ${{ secrets.PIPER_VAULTAPPROLESECRETID }}
  PIPER_ACTION_CUSTOM_DEFAULTS_PATHS: ${{ inputs.custom-defaults-paths }}
jobs:
  Init:
    runs-on: ubuntu-latest
    outputs:
      activeStagesMap: ${{ steps.checkIfStepActive.outputs.activeStagesMap }}
      activeStepsMap: ${{ steps.checkIfStepActive.outputs.activeStepsMap }}
      pipelineEnv: ${{ steps.pipelineEnv.outputs.pipelineEnv }}
      onProductiveBranch: ${{ steps.export.outputs.onProductiveBranch }}
      isOptimizedAndScheduled: ${{ steps.export.outputs.isOptimizedAndScheduled }}
      pipelineOptimization: ${{ steps.export.outputs.pipelineOptimization }}
      manualConfirmation: ${{ steps.export.outputs.manualConfirmation }}
    steps:
      - uses: actions/checkout@v3
      - name: version
        uses: SAP/project-piper-action@update_node_version
        with:
          command: version
      - name: Get NodeJS Version
        run: |
          echo "${{ matrix.version }}"
      - name: Read stage configuration
        id: stage_config
        uses: SAP/project-piper-action@update_node_version
        with:
          command: getConfig
          flags: --stageConfig --outputFile stage-config.json
      - name: Read productive branch config    
        run: |
          echo "productiveBranch=$(jq -j .productiveBranch stage-config.json)" >> $GITHUB_ENV
      - name: Retrieve setting for productive branch
        run: |
          if [[ "${{ github.ref_name }}" == "${{ env.productiveBranch }}" ]]; then
            echo "onProductiveBranch=true" >> $GITHUB_ENV
          else
            echo "onProductiveBranch=false" >> $GITHUB_ENV
          fi
      - run: |
          echo "::notice::Branch ${{ github.ref_name }} is productive branch: ${{ env.onProductiveBranch }}"
      - name: Retrieve setting for manual confirmation    
        run: |
          if [[ $(jq -j .manualConfirmation stage-config.json) == "true" ]]; then
            echo "manualConfirmation=true" >> $GITHUB_ENV
            echo "::notice::Pipeline requires manual confirmation: true"
          else
            echo "manualConfirmation=false" >> $GITHUB_ENV
            echo "::notice::Pipeline requires manual confirmation: false"
          fi
      - run: |
          echo "::notice::Triggering event: ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "scheduledRun=true" >> $GITHUB_ENV
            echo "::notice::Pipeline is scheduled: true"
          else
            echo "scheduledRun=false" >> $GITHUB_ENV
            echo "::notice::Pipeline is scheduled: false"
          fi
      - run: |
          if [[ $(jq -j .pipelineOptimization stage-config.json) == "true" ]]; then
            echo "pipelineOptimization=true" >> $GITHUB_ENV
            echo "::notice::Pipeline optimization is active: true"
          else
            echo "pipelineOptimization=false" >> $GITHUB_ENV
            echo "::notice::Pipeline optimization is active: false"
          fi
      - run: |
          if [[ "${{ env.pipelineOptimization }}" == "true" && "${{ github.event_name }}" == "schedule" ]]; then
            echo "isOptimizedAndScheduled=true" >> $GITHUB_ENV
            echo "::notice::Pipeline is scheduled and optimized: true"
          else
            echo "isOptimizedAndScheduled=false" >> $GITHUB_ENV
            echo "::notice::Pipeline is scheduled and optimized: false"
          fi
      - id: export
        run: |
          echo "::set-output name=onProductiveBranch::${{ env.onProductiveBranch }}"
          echo "::set-output name=isOptimizedAndScheduled::${{ env.isOptimizedAndScheduled }}"
          echo "::set-output name=pipelineOptimization::${{ env.pipelineOptimization }}"
          echo "::set-output name=manualConfirmation::${{ env.manualConfirmation }}"
      - name: checkIfStepActive
        uses: SAP/project-piper-action@update_node_version
        with:
          command: ''
          create-check-if-step-active-maps: true
      - name: Export checkIfStepActive maps
        if: always()
        id: checkIfStepActive
        run: |
          echo "::set-output name=activeStagesMap::$(jq -c . < .pipeline/stage_out.json)"
          echo "::set-output name=activeStepsMap::$(jq -c . < .pipeline/step_out.json)"
      - name: Export pipeline environment
        uses: SAP/project-piper-action@update_node_version
        id: pipelineEnv
        with:
          command: ''
          export-pipeline-environment: true
